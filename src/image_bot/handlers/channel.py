from telegram import Update
from telegram.ext import ContextTypes
from loguru import logger
from sqlalchemy import select
from image_bot.database.base import Session
from image_bot.database.models import User, Channel
from image_bot.keyboards.keyboards import get_channel_management_keyboard, get_channels_list_keyboard


async def manage_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    async with Session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.telegram_id == update.effective_user.id)
            )
            user = result.scalar_one_or_none()
            
            if not user or not user.is_authorized:
                error_text = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏."
                if update.callback_query:
                    await update.callback_query.message.reply_text(error_text)
                else:
                    await update.message.reply_text(error_text)
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            result = await session.execute(select(Channel))
            channels = result.scalars().all()

            channels_text = "üì∫ –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:\n\n"
            if channels:
                for channel in channels:
                    channels_text += f"ID: {channel.telegram_id}\n"
                    channels_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {channel.title}\n"
                    if channel.username:
                        channels_text += f"Username: @{channel.username}\n"
                    channels_text += "\n"
            else:
                channels_text += "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            reply_markup = get_channel_management_keyboard(bool(channels))
            channels_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            if update.callback_query:
                await update.callback_query.message.edit_text(channels_text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(channels_text, reply_markup=reply_markup)

        except Exception as e:
            logger.error(f"Error in channel management: {e}")
            error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤."
            if update.callback_query:
                await update.callback_query.message.edit_text(error_text)
            else:
                await update.message.reply_text(error_text)


async def handle_channel_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
    logger.info("Received forwarded message")

    if 'waiting_for' not in context.user_data or context.user_data['waiting_for'] != 'channel_message':
        logger.info("Not waiting for channel message")
        return

    if not update.message or not update.message.forward_origin:
        logger.warning("Message is not forwarded")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
        return

    logger.info(f"Forward origin type: {type(update.message.forward_origin)}")
    logger.info(f"Forward origin: {update.message.forward_origin}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞
        if not hasattr(update.message.forward_origin, 'chat'):
            logger.warning("Message is not forwarded from a channel")
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
            return

        chat = update.message.forward_origin.chat
        if chat.type != 'channel':
            logger.warning("Forwarded message is not from a channel")
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
            return

        logger.info(f"Processing channel: {chat.title} (ID: {chat.id})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ
            bot_member = await context.bot.get_chat_member(chat.id, context.bot.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if not bot_member.status in ['administrator', 'creator']:
                logger.warning(f"Bot is not admin in channel {chat.title}")
                await update.message.reply_text(
                    "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!\n\n"
                    "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞\n"
                    "2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —Å–Ω–æ–≤–∞"
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞
            if not bot_member.can_post_messages:
                logger.warning(f"Bot doesn't have posting rights in channel {chat.title}")
                await update.message.reply_text(
                    "–£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ!\n\n"
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π."
                )
                return

            logger.info(f"Bot has required permissions in channel {chat.title}")

        except Exception as e:
            logger.error(f"Error checking bot permissions: {e}")
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
            )
            return

        async with Session() as session:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞–Ω–∞–ª
                result = await session.execute(
                    select(Channel).where(Channel.telegram_id == chat.id)
                )
                existing_channel = result.scalar_one_or_none()
                
                if existing_channel:
                    logger.info(f"Channel {chat.title} already exists")
                    await update.message.reply_text(f"–ö–∞–Ω–∞–ª {chat.title} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
                    return

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                new_channel = Channel(
                    telegram_id=chat.id,
                    title=chat.title,
                    username=chat.username if hasattr(chat, 'username') else None
                )
                session.add(new_channel)
                await session.commit()
                logger.info(f"Successfully added channel {chat.title}")

                await update.message.reply_text(
                    f"‚úÖ –ö–∞–Ω–∞–ª {chat.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    "–¢–µ–ø–µ—Ä—å –±–æ—Ç —Å–º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ."
                )

            except Exception as e:
                logger.error(f"Error adding channel: {e}")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
            finally:
                context.user_data.pop('waiting_for', None)

    except Exception as e:
        logger.error(f"Error processing channel: {e}")
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        )


async def handle_channel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == "add_channel":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
        await query.message.reply_text(
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.user_data['waiting_for'] = 'channel_message'

    elif query.data == "remove_channel":
        async with Session() as session:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                result = await session.execute(select(Channel))
                channels = result.scalars().all()
                reply_markup = get_channels_list_keyboard(channels)

                await query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"Error in remove_channel callback: {e}")
                await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.")

    elif query.data.startswith("delete_channel_"):
        channel_id = int(query.data.split('_')[2])
        async with Session() as session:
            try:
                # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª
                result = await session.execute(
                    select(Channel).where(Channel.telegram_id == channel_id)
                )
                channel = result.scalar_one_or_none()
                
                if channel:
                    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                    from image_bot.database.models import Schedule
                    from sqlalchemy import delete
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
                    await session.execute(
                        delete(Schedule).where(Schedule.channel_id == channel.id)
                    )
                    
                    # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–∞–º –∫–∞–Ω–∞–ª
                    await session.delete(channel)
                    await session.commit()
                    await query.message.edit_text(f"–ö–∞–Ω–∞–ª {channel.title} –∏ –≤—Å–µ –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
                else:
                    await query.message.edit_text("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except Exception as e:
                logger.error(f"Error in delete_channel callback: {e}")
                await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")

    elif query.data == "back_to_channels":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤
        await manage_channels(update, context)
