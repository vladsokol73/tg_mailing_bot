import asyncio
from datetime import datetime
import logging
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters
)

from image_bot.config import Config
from image_bot.database.base import init_db, get_session
from image_bot.services.mailing_service import MailingService
from image_bot.services.scheduler_service import SchedulerService
from image_bot.utils.logger import logger


class Bot:
    def __init__(self, config: Config):
        self.config = config
        self.application = None
        self.scheduler_service = None
        self.mailing_service = None

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="show_channels")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–∞–Ω–∞–ª\n"
            "2. –°–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            "3. –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∞–≤–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "4. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
            "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª\n"
            "2. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            "3. –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∞–≤–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "4. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏¬ª\n"
            "5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
            "- –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
            "- –ö–∞–∂–¥–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞\n"
            "- –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
            reply_markup=reply_markup
        )

    async def handle_channel_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞"""
        if 'waiting_for' not in context.user_data or context.user_data['waiting_for'] != 'channel_id':
            return

        try:
            channel_id = int(update.message.text)
            success, message = await self.mailing_service.check_channel_permissions(channel_id)
            
            if success:
                try:
                    chat = await context.bot.get_chat(channel_id)
                    await self.mailing_service.add_channel(channel_id, chat.title)
                    await update.message.reply_text(
                        f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n{message}\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞."
                    )
                except Exception as e:
                    logger.error(f"Error adding channel: {e}")
                    await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª.\n{message}\n\n"
                    "üìã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                    "1. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª\n"
                    "2. –°–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                    "3. –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"
                )
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            logger.error(f"Error handling channel ID: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –∫–∞–Ω–∞–ª–∞.")
        finally:
            context.user_data.pop('waiting_for', None)

    async def handle_schedule_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if 'editing_schedule' not in context.user_data:
            return

        try:
            time_str = update.message.text
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            time = datetime.strptime(time_str, "%H:%M").time()
            
            channel_id = context.user_data['editing_schedule']['channel_id']
            schedule_id = context.user_data['editing_schedule'].get('id')
            
            if schedule_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                await self.mailing_service.update_schedule(schedule_id, new_time=time)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                await self.mailing_service.create_schedule(int(channel_id), time)
            
            await update.message.reply_text("‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await self.mailing_service.show_schedule_menu(update, context, int(channel_id))
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30"
            )
        except Exception as e:
            logger.error(f"Error handling schedule time: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        finally:
            context.user_data.pop('editing_schedule', None)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        data = query.data
        
        try:
            if data == "start":
                await self.start(update, context)
            elif data == "help":
                await self.help(update, context)
            elif data == "show_channels":
                await self.mailing_service.show_channels_menu(update, context)
            elif data == "add_channel":
                context.user_data['waiting_for'] = 'channel_id'
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="show_channels")]]
                await query.edit_message_text(
                    text="üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            elif data.startswith("show_channel:"):
                channel_id = int(data.split(":")[1])
                await self.mailing_service.show_channel_menu(update, context, channel_id)
            elif data.startswith("check_permissions:"):
                channel_id = int(data.split(":")[1])
                success, message = await self.mailing_service.check_channel_permissions(channel_id)
                await query.answer(message)
            elif data.startswith("manage_schedules:"):
                channel_id = int(data.split(":")[1])
                await self.mailing_service.show_schedule_menu(update, context, channel_id)
            elif data.startswith("add_schedule:"):
                channel_id = data.split(":")[1]
                context.user_data['editing_schedule'] = {
                    'channel_id': channel_id,
                    'id': None
                }
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"manage_schedules:{channel_id}")]]
                await query.edit_message_text(
                    text="üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            elif data.startswith("edit_schedule:"):
                _, channel_id, schedule_id = data.split(":")
                await self.mailing_service.show_edit_schedule_menu(update, context, int(channel_id), int(schedule_id))
            elif data.startswith("change_time:"):
                _, channel_id, schedule_id = data.split(":")
                context.user_data['editing_schedule'] = {
                    'channel_id': channel_id,
                    'id': int(schedule_id)
                }
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"manage_schedules:{channel_id}")]]
                await query.edit_message_text(
                    text="üïí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            elif data.startswith("toggle_schedule:"):
                _, channel_id, schedule_id = data.split(":")
                schedule = await self.mailing_service.update_schedule(int(schedule_id), enabled=None)  # None –¥–ª—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await self.mailing_service.show_edit_schedule_menu(update, context, int(channel_id), int(schedule_id))
            elif data.startswith("delete_schedule:"):
                _, channel_id, schedule_id = data.split(":")
                await self.mailing_service.delete_schedule(int(schedule_id))
                await self.mailing_service.show_schedule_menu(update, context, int(channel_id))
            elif data.startswith("remove_channel:"):
                channel_id = int(data.split(":")[1])
                await self.mailing_service.delete_channel(channel_id)
                await self.mailing_service.show_channels_menu(update, context)
            else:
                await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        except Exception as e:
            logger.error(f"Error handling callback: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await init_db()

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.config.bot.token).build()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π (Session), —á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–µ —Å–µ—Å—Å–∏–∏ —Å–∞–º–∏
            from image_bot.database.base import Session as SessionFactory
            self.mailing_service = MailingService(self.application.bot, SessionFactory)
            self.scheduler_service = SchedulerService(self.application.bot, SessionFactory, self.config)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start))
            self.application.add_handler(CommandHandler("help", self.help))
            self.application.add_handler(CallbackQueryHandler(self.handle_callback))
            self.application.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND,
                self.handle_channel_id
            ))
            self.application.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND,
                self.handle_schedule_time
            ))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            asyncio.create_task(self.scheduler_service.run())

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.run_polling()
        except Exception as e:
            logger.error(f"Error starting bot: {e}")
            raise
